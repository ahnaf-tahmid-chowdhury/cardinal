[Tests]
  [polar_cell_provided_bins]
    type = CSVDiff
    input = cell.i
    csvdiff = cell_provided_out.csv
    cli_args = 'Problem/Filters/Polar/polar_angle_boundaries="0.0 1.5708 3.1415926535897932384626433832795029" Outputs/file_base=cell_provided_out'
    requirement = "The system shall be capable of adding an PolarAngleFilter to a CellTally with bins that are provided. "
                  "This test also ensures the binned fluxes sum to the total flux through the use of global normalization."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [polar_cell_equally_spaced_bins]
    type = CSVDiff
    input = cell.i
    csvdiff = cell_equal_out.csv
    cli_args = 'Problem/Filters/Polar/num_equal_divisions=2 Outputs/file_base=cell_equal_out'
    requirement = "The system shall be capable of adding an PolarAngleFilter to a CellTally with equally spaced bins. "
                  "This test also ensures the binned fluxes sum to the total flux through the use of global normalization."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [polar_mesh]
    type = CSVDiff
    input = mesh.i
    csvdiff = mesh_out.csv
    requirement = "The system shall be capable of adding an PolarAngleFilter to a MeshTally."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [bin_sum]
    type = Exodiff
    input = mesh_sum.i
    exodiff = mesh_sum_out.e
    requirement = "The system shall correctly compute polar binned fluxes with mesh tallies such that the "
                  "sum of the flux over each bin equals the total flux. The gold file was generated "
                  "with an input file that scored the flux without a PolarAngleFilter."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [not_enough_provided_bnds]
    type = RunException
    input = cell.i
    cli_args = 'Problem/Filters/Polar/polar_angle_boundaries="0.0"'
    expect_err = 'At least two polar angles are required to create bins!'
    requirement = "The system shall error if 'polar_angle_boundaries' doesn't contain enough boundaries to form bins."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [bnds_wrong_order]
    type = RunException
    input = cell.i
    cli_args = 'Problem/Filters/Polar/polar_angle_boundaries="3.1415926535897932384626433832795029 1.5708 0.0"'
    expect_err = 'The polar angle boundaries must be provided in increasing order!'
    requirement = "The system shall error if the boundaries provided in 'polar_angle_boundaries' are in descending order."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [no_bins]
    type = RunException
    input = cell.i
    expect_err = 'No bins have been specified! Please set either 'num_equal_divisions' or 'polar_angle_boundaries'.'
    requirement = "The system shall error if neither 'num_equal_divisions' or 'polar_angle_boundaries' are provided."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [both_bins]
    type = RunException
    input = cell.i
    cli_args = 'Problem/Filters/Polar/num_equal_divisions=2 Problem/Filters/Polar/polar_angle_boundaries="0.0 1.5708 3.1415926535897932384626433832795029"'
    expect_err = 'You have set both 'num_equal_divisions' and 'polar_angle_boundaries'! Only one bin option can be specified at a time.'
    requirement = "The system shall error if both 'num_equal_divisions' and 'polar_angle_boundaries' are provided."
    required_objects = 'OpenMCCellAverageProblem'
  []
[]
